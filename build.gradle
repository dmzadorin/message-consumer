plugins {
    id 'java'
    id 'idea'
    id 'org.springframework.boot' version '2.2.1.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id "org.flywaydb.flyway" version "6.1.0"
    id 'nu.studer.jooq' version '3.0.3'
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation 'org.apache.logging.log4j:log4j-core:2.12.1'

    jooqRuntime 'org.postgresql:postgresql:42.2.5'
    implementation 'org.postgresql:postgresql:42.2.5'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.springframework.kafka:spring-kafka-test'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.3.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.3.0'
    testImplementation 'com.h2database:h2:1.4.199'
}

group = 'ru.dmzadorin.demo'
version = '1.0-SNAPSHOT'
description = 'message-consumer'

sourceCompatibility = 11
targetCompatibility = 11

ext.dbDriver = 'org.postgresql.Driver'
ext.dbUrl = 'jdbc:postgresql://localhost:5432/app'
ext.dbUsername = 'app'
ext.dbPassword = 'app'

flyway {
    driver = dbDriver
    url = dbUrl
    user = dbUsername
    password = dbPassword
}

jooq {
    sample(sourceSets.main) {
        jdbc {
            driver = dbDriver
            url = dbUrl
            user = dbUsername
            password = dbPassword
        }
        generator {
            name = 'org.jooq.codegen.DefaultGenerator'
            strategy {
                name = 'org.jooq.codegen.DefaultGeneratorStrategy'
            }
            database {
                name = 'org.jooq.meta.postgres.PostgresDatabase'
                includes = ".*"
                inputSchema = 'public'
            }
            generate {
                deprecated = false
                fluentSetters = true
            }
            target {
                packageName = 'ru.dmzadorin.demo.db.jooq'
                directory = 'target/generated-sources/jooq'
            }
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

clean.doFirst {
    delete "${rootDir}/target/"
}